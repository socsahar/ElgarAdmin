const express = require('express');
const cors = require('cors');
const helmet = require('helmet');
const rateLimit = require('express-rate-limit');
const swaggerUi = require('swag// API Routes
app.use('/api/auth', authLogger, authRoutes);
app.use('/api/admin', adminRoutes);
app.use('/api/attendance', attendanceRoutes);
app.use('/api/volunteers', volunteerRoutes);
app.use('/api/volunteer-assignments', volunteerAssignmentRoutes);
app.use('/api/permissions', permissionsRoutes);
app.use('/api/users', userRoutes);
app.use('/api/upload', uploadRoutes);
app.use('/api/debug', debugRoutes);press');
const swaggerJsdoc = require('swagger-jsdoc');
require('dotenv').config();

// Fix SSL certificate issues for corporate networks/firewalls
// This resolves the "unable to get local issuer certificate" error
// that prevents event synchronization between website and mobile app
if (process.env.NODE_ENV === 'development') {
  process.env["NODE_TLS_REJECT_UNAUTHORIZED"] = 0;
  console.log('🔒 SSL certificate validation disabled for development environment');
}

// Import Supabase client
const { supabase, supabaseAdmin } = require('./config/supabase');

// Import database setup functions
const { migrateDatabase } = require('./scripts/migrateDatabase');
const createDefaultAdmin = require('./scripts/createDefaultAdmin');
const { initializeLogs } = require('./scripts/initializeLogs');
const { healthMonitor } = require('./utils/healthMonitor');

// Import routes
const authRoutes = require('./routes/auth');
const adminRoutes = require('./routes/admin');
const attendanceRoutes = require('./routes/attendance');
const volunteerRoutes = require('./routes/volunteers');
const volunteerAssignmentRoutes = require('./routes/volunteer-assignments');
const permissionsRoutes = require('./routes/permissions');
const userRoutes = require('./routes/users');
const uploadRoutes = require('./routes/upload');
const debugRoutes = require('./routes/debug');

// Import middleware
const authMiddleware = require('./middleware/auth');
const errorHandler = require('./middleware/errorHandler');

// Import utilities
const Logger = require('./utils/logger');

const app = express();
const PORT = process.env.PORT || 5000;

// Trust proxy configuration - secure for development
if (process.env.NODE_ENV === 'development') {
  // In development, only trust localhost/loopback
  app.set('trust proxy', 'loopback');
} else {
  // In production, configure specific trusted proxies
  app.set('trust proxy', 1); // Trust first proxy
}

// Rate limiting
const limiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 minutes
  max: 1000, // limit each IP to 1000 requests per windowMs
  message: 'Too many requests, please try again later.',
  skip: (req) => {
    // Skip rate limiting for local development
    return process.env.NODE_ENV === 'development' && (req.ip === '::1' || req.ip === '127.0.0.1');
  },
  // Disable validation warnings for development
  validate: process.env.NODE_ENV !== 'development'
});

app.use(limiter);

// Security middleware
app.use(helmet());

// CORS configuration
app.use(cors({
  origin: [
    'http://localhost:3000',
    'http://127.0.0.1:3000',
    'http://localhost:3001',
    process.env.CLIENT_URL
  ].filter(Boolean),
  credentials: true,
  methods: ['GET', 'POST', 'PUT', 'DELETE', 'PATCH', 'OPTIONS'],
  allowedHeaders: ['Content-Type', 'Authorization', 'x-api-key']
}));

// Body parsing middleware
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true, limit: '10mb' }));

// Serve static files for uploaded images
app.use('/uploads', express.static('uploads'));

// Logging middleware for API requests
const authLogger = (req, res, next) => {
  const start = Date.now();
  
  res.on('finish', async () => {
    const duration = Date.now() - start;
    const userId = req.user?.id || null;
    
    // Log API calls with improved level logic
    await Logger.logAPI(req.method, req.originalUrl, res.statusCode, duration, userId, {
      api_call: true,
      ip: req.ip,
      user_agent: req.get('User-Agent')
    });
  });
  
  next();
};

const errorLogger = (err, req, res, next) => {
  Logger.error(`Server Error: ${err.message}`, 'Server', req.user?.id, {
    error: err.message,
    stack: err.stack,
    url: req.originalUrl,
    method: req.method,
    ip: req.ip
  });
  next(err);
};

// Swagger configuration
const swaggerOptions = {
  definition: {
    openapi: '3.0.0',
    info: {
      title: 'Elgar Admin API',
      version: '1.0.0',
      description: 'API for Elgar Admin Site',
    },
    servers: [
      {
        url: `http://localhost:${PORT}`,
        description: 'Development server',
      },
    ],
  },
  apis: ['./routes/*.js'], // Path to the API files
};

const swaggerDocs = swaggerJsdoc(swaggerOptions);
app.use('/api/docs', swaggerUi.serve, swaggerUi.setup(swaggerDocs));

// Supabase connection test and database setup
console.log('🔗 מתחבר ל-Supabase...');
supabaseAdmin
  .from('users')
  .select('count(*)')
  .then(async ({ data, error }) => {
    if (error) {
      console.log('⚠️  בדיקת חיבור Supabase הושלמה (טבלה עשויה לא להתקיים עדיין)');
      console.log('🔧 מריץ מיגרציית מסד נתונים...');
      
      // Run database migration
      const migrationSuccess = await migrateDatabase();
      if (migrationSuccess) {
        console.log('✅ מיגרציית מסד נתונים הושלמה');
        
        // Create default admin user
        console.log('👤 מגדיר משתמש אדמין ברירת מחדל...');
        await createDefaultAdmin();
        
        // Initialize logs
        console.log('📊 מאתחל לוגים ראשוניים...');
        await initializeLogs();
      } else {
        console.error('❌ מיגרציית מסד נתונים נכשלה');
      }
    } else {
      console.log('✅ התחברות ל-Supabase בוצעה בהצלחה');
      
      // Still try to create admin user if it doesn't exist
      console.log('👤 בודק משתמש אדמין...');
      await createDefaultAdmin();
      
      // Initialize logs if needed
      console.log('📊 בודק לוגים ומאתחל במידת הצורך...');
      await initializeLogs();
    }
  })
  .catch(err => console.error('❌ שגיאת חיבור Supabase:', err));

// Routes
app.use('/api/auth', authLogger, authRoutes);
app.use('/api/admin', adminRoutes);
app.use('/api/attendance', attendanceRoutes);
app.use('/api/volunteers', volunteerRoutes);
app.use('/api/volunteer-assignments', volunteerAssignmentRoutes);
app.use('/api/users', userRoutes);
app.use('/api/upload', uploadRoutes);
app.use('/api/debug', debugRoutes);

// Health check endpoint
app.get('/api/health', (req, res) => {
  res.json({ 
    status: 'OK', 
    message: 'Elgar Admin Server is running',
    timestamp: new Date().toISOString(),
    environment: process.env.NODE_ENV
  });
});

// Error handling middleware
app.use(errorLogger);
app.use(errorHandler);

// 404 handler
app.use('*', (req, res) => {
  res.status(404).json({ message: 'Route not found' });
});

// Socket.io setup
const http = require('http');
const { Server } = require('socket.io');

const server = http.createServer(app);
const io = new Server(server, {
  cors: {
    origin: process.env.CLIENT_URL || 'http://localhost:3000',
    methods: ['GET', 'POST']
  }
});

// Track online users - using userId as key to prevent duplicates
const onlineUsers = new Map(); // userId -> user data
const userSockets = new Map(); // userId -> Set of socket.ids

// Socket.io connection handling
io.on('connection', (socket) => {
  console.log('👤 User connected:', socket.id);

  socket.on('join-admin', async (data) => {
    try {
      socket.join('admin-room');
      
      // Add user to online users list
      if (data.userId) {
        // Get user details from database
        const { data: userData, error } = await supabase
          .from('users')
          .select('id, username, full_name, role, id_number, photo_url, phone_number, position, has_car, car_type, license_plate, car_color, created_at')
          .eq('id', data.userId)
          .single();
        
        if (!error && userData) {
          
          // Track socket for this user
          if (!userSockets.has(data.userId)) {
            userSockets.set(data.userId, new Set());
          }
          userSockets.get(data.userId).add(socket.id);
          
          // Store socket's userId for cleanup on disconnect
          socket.userId = data.userId;
          
          // Add or update user in online users (only once per userId)
          onlineUsers.set(data.userId, {
            ...userData,
            connectedAt: onlineUsers.has(data.userId) ? onlineUsers.get(data.userId).connectedAt : new Date().toISOString(),
            role: data.role || userData.role,
            socketCount: userSockets.get(data.userId).size // Track number of connections
          });
          
          // Broadcast updated online users list to all admin users
          const onlineUsersList = Array.from(onlineUsers.values());
          io.to('admin-room').emit('online-users-updated', onlineUsersList);
          
        }
      }
    } catch (error) {
      console.error('Error in join-admin:', error);
    }
  });

  socket.on('get-online-users', () => {
    const onlineUsersList = Array.from(onlineUsers.values());
    socket.emit('online-users-updated', onlineUsersList);
  });

  socket.on('disconnect', () => {
    console.log('👤 User disconnected:', socket.id);
    
    // Remove socket from user's socket set
    if (socket.userId) {
      const userSocketSet = userSockets.get(socket.userId);
      if (userSocketSet) {
        userSocketSet.delete(socket.id);
        
        // If user has no more socket connections, remove from online users
        if (userSocketSet.size === 0) {
          userSockets.delete(socket.userId);
          const disconnectedUser = onlineUsers.get(socket.userId);
          if (disconnectedUser) {
            onlineUsers.delete(socket.userId);
          }
        } else {
          // Update socket count for remaining connections
          const userData = onlineUsers.get(socket.userId);
          if (userData) {
            userData.socketCount = userSocketSet.size;
          }
        }
        
        // Broadcast updated online users list to all admin users
        const onlineUsersList = Array.from(onlineUsers.values());
        io.to('admin-room').emit('online-users-updated', onlineUsersList);
      }
    }
  });
});

// Make io available to routes
app.set('io', io);

server.listen(PORT, () => {
  console.log(`🚀 השרת רץ על פורט ${PORT}`);
  console.log(`📚 תיעוד API: http://localhost:${PORT}/api/docs`);
  console.log(`🌐 אתר האדמין: http://localhost:3000`);
  console.log(`📱 מערכת Elgar זמינה לשימוש`);
  
  // Start health monitoring
  console.log('🏥 מפעיל מערכת ניטור בריאות...');
  healthMonitor.start();
});
